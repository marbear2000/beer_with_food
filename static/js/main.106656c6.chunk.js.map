{"version":3,"sources":["components/Beers/beers.js","components/BeerList/BeerList.js","components/Searchbar/searchbar.js","util/punk.js","App.js","serviceWorker.js","index.js"],"names":["Beers","beer","this","props","react_default","a","createElement","className","src","image_url","alt","name","tagline","description","food_pairing","brewers_tips","React","Component","BeerList","beers","map","Beers_beers","key","id","Searchbar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","query","handleQuery","bind","assertThisInitialized","handleSearch","event","setState","target","value","searchPunk","preventDefault","type","placeholder","onChange","href","onClick","Punk","search","fetch","concat","then","response","json","jsonResponse","alert","join","App","_this2","react_typed_default","strings","typeSpeed","startDelay","backSpeed","backDelay","Searchbar_searchbar","components_BeerList_BeerList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.106656c6.chunk.js","sourcesContent":["import React from 'react';\nimport './beers.css';\n\n\nclass Beers extends React.Component {\n\n  render() {\n    const { beer } = this.props;\n      return (\n        <div>\n          <div className=\"image_url\">\n            <img src={beer.image_url} alt=\"beer bottle\" />\n          </div>\n\n          <div className=\"container beer-details\">\n            <h2 className=\"name\">{beer.name}</h2>\n            <h4 className=\"tagline\">Beer Type :: {beer.tagline}</h4>\n            <p className=\"description\">{beer.description}</p>\n\n            <h3 className=\"food-pairing\">The beer goes best with ::</h3>\n              <ul className=\"food-pairing-list\">\n                <li>{beer.food_pairing}.</li>\n              </ul>\n\n            <h3 className=\"brewers-tips\">Top Tips from the best brewers ::</h3>\n            <p>{beer.brewers_tips}</p>\n          </div>\n        </div>\n    )\n  }\n}\n\n\nexport default Beers;\n","import React from 'react';\nimport './BeerList.css';\nimport Beers from '../Beers/beers'\n\nclass BeerList extends React.Component {\n  render() {\n    return (\n      <div className='beer-details'>\n      {\n        this.props.beers.map(beer => {\n          return <Beers key={beer.id} beer={beer} />;\n        })\n      }\n      </div>\n    );\n  }\n}\n\nexport default BeerList;\n","import React from 'react';\nimport './searchbar.css';\n\n\nclass Searchbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    query: ''\n    }\n    this.handleQuery = this.handleQuery.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleQuery(event){\n    this.setState({\n      query: event.target.value\n    })\n  }\n\n  handleSearch(event) {\n    this.props.searchPunk(this.state.query);\n    event.preventDefault();\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"searchbar\">\n          <input type=\"text\" placeholder=\"Input Your Favourite Food\" onChange={this.handleQuery} />\n        </div>\n        <div className=\"searchbar-submit\">\n          <a href=\"www.#.com\" onClick={this.handleSearch}>FIND!</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Searchbar;\n","\nconst Punk = {\n  search(query){\n    return fetch(`https://api.punkapi.com/v2/beers?food=${query}`).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if(jsonResponse.value === ''){\n        alert('Stop')\n      } else if(jsonResponse){\n        return jsonResponse.map(beer => {\n          return {\n            id: beer.id,\n            image_url: beer.image_url,\n            name: beer.name,\n            tagline: beer.tagline,\n            description: beer.description,\n            food_pairing: beer.food_pairing.join(\". \"),\n            brewers_tips: beer.brewers_tips\n          }\n        })\n      }\n    });\n  }\n}\n\nexport default Punk;\n","import React, { Component } from 'react';\nimport Typed from 'react-typed';\nimport './App.css';\nimport BeerList from './components/BeerList/BeerList';\nimport Searchbar from './components/Searchbar/searchbar';\nimport Punk from './util/punk'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      beers: []\n    }\n    this.searchPunk = this.searchPunk.bind(this);\n  }\n\n  searchPunk(query){\n    Punk.search(query).then(beers => {\n      this.setState({\n        beers: beers\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"banner\">\n          <div className=\"header\">\n          <h1>BEERwithFOOD</h1>\n          </div>\n\n          <div id=\"typed-strings\">\n            <Typed\n                strings={['Match your favourite BEER with FOOD',\n                'Match your favourite FOOD with BEER']}\n                typeSpeed={100}\n                startDelay={600}\n                backSpeed={100}\n                backDelay={500}\n            />\n          </div>\n\n          <Searchbar searchPunk={this.searchPunk}/>\n          <BeerList beers={this.state.beers}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}